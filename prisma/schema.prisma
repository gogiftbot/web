generator client {
  provider   = "prisma-client-js"
  output     = "../src/generated/prisma"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model referral {
  id String @id @default(uuid())

  value   String @db.VarChar(10)
  percent Float  @default(10)

  accountId String  @unique @map("account_id")
  account   account @relation("referral_own", fields: [accountId], references: [id])

  accounts account[] @relation("referrals")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([value])
  @@map("referrals")
}

model account {
  id String @id @default(uuid())

  balance    Float    @default(0)
  username   String   @unique
  language   Language @default(EN)
  telegramId String?  @map("telegram_id") @db.VarChar(255)
  avatarUrl  String?  @map("avatar_url") @db.VarChar(255)

  referral referral? @relation("referral_own")

  referredById String?   @map("referred_by_id")
  referredBy   referral? @relation("referrals", fields: [referredById], references: [id])

  nfts         account_nft[]
  gifts        account_gift[]
  transactions transaction[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("accounts")
}

model nft {
  id String @id @default(uuid())

  title String
  sku   String
  price Float

  isArchived Boolean @default(false) @map("is_archived")

  cases        gift_case[]
  nftAccounts  account_nft[]
  giftAccounts account_gift[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("nfts")
}

model account_gift {
  id String @id @default(uuid())

  price      Float
  isSold     Boolean @default(false) @map("is_sold")
  isWithdraw Boolean @default(false) @map("is_withdraw")

  account   account @relation(fields: [accountId], references: [id])
  accountId String  @map("account_id")

  nft   nft    @relation(fields: [nftId], references: [id])
  nftId String @map("nft_id")

  case   gift_case @relation(fields: [caseId], references: [id])
  caseId String    @map("case_id")

  transaction transaction?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("account_gifts")
}

model account_nft {
  account   account @relation(fields: [accountId], references: [id])
  accountId String  @map("account_id")

  nft   nft    @relation(fields: [nftId], references: [id])
  nftId String @map("nft_id")

  transactions account_nft_transaction[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@id([accountId, nftId])
  @@map("account_nfts")
}

model gift_case {
  id String @id @default(uuid())

  sku        String
  title      String
  price      Float
  starPrice  Int     @default(0) @map("star_price")
  isArchived Boolean @default(false) @map("is_archived")

  gifts        nft[]
  accountGifts account_gift[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("gift_cases")
}

model account_nft_transaction {
  id String @id @default(uuid())

  amount Float

  account_nft          account_nft @relation(fields: [account_nftAccountId, account_nftNftId], references: [accountId, nftId])
  account_nftAccountId String
  account_nftNftId     String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("account_nft_transaction")
}

model transaction {
  id String @id @default(uuid())

  type     TransactionType     @default(deposit)
  status   TransactionStatus   @default(pending)
  currency TransactionCurrency @default(ton)
  amount   Float
  address  String?

  accountId String
  account   account @relation(fields: [accountId], references: [id])

  tonTransaction ton_transaction?

  accountGift    account_gift? @relation(fields: [account_giftId], references: [id])
  account_giftId String?       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("transactions")
}

model ton_transaction {
  id String @id @default(uuid())

  from String
  to   String
  lt   String?

  transaction   transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique @map("transaction_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("ton_transactions")
}

enum Language {
  RU
  EN

  @@map("language")
}

enum TransactionType {
  deposit
  withdraw

  @@map("transaction_type")
}

enum TransactionStatus {
  pending
  completed
  declined

  @@map("transaction_status")
}

enum TransactionCurrency {
  ton
  star

  @@map("transaction_currency")
}
