import { Language, transaction } from "@/generated/prisma";
import { numberToString } from "@/lib/utils/number";
import TelegramBot from "node-telegram-bot-api";
import { config } from "../config.service";

const WelcomeMessageByLanguage: Record<Language, string> = {
  [Language.EN]: `you are a legend! üéâ

üéÅ Gifts don‚Äôt wait. Open. Win. Repeat.
üéÆ GoGift ‚Äî where surprises drop daily.`,
  [Language.RU]: `—Ç—ã –ª–µ–≥–µ–Ω–¥–∞! üéâ

üéÅ –ü–æ–¥–∞—Ä–∫–∏ –Ω–µ –∂–¥—É—Ç. –û—Ç–∫—Ä—ã–≤–∞–π. –í—ã–∏–≥—Ä—ã–≤–∞–π. –ü–æ–≤—Ç–æ—Ä—è–π.
üéÆ GoGift ‚Äî –∑–¥–µ—Å—å —Å—é—Ä–ø—Ä–∏–∑—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.`,
};

export const welcomeMessage = (
  name: string,
  language: Language = Language.EN
) =>
  `üéâ ${name.replace(/([_*\[\]()~`>#+\-=|{}.!])/g, "\\$1")}, ${
    WelcomeMessageByLanguage[language]
  }`;

export const welcomeMessageOptions = (
  language: Language,
  referral?: string
): TelegramBot.SendMessageOptions => {
  const startText = language === Language.RU ? "–ù–∞—á–∞—Ç—å" : "Start";
  const joinChannelText =
    language === Language.RU ? "–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª" : "Join Channel";
  const supportText = language === Language.RU ? "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" : "Support";

  return {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: startText,
            url: `https://t.me/${config.BOT_NAME}${
              referral ? `?startapp=${referral}` : ""
            }`,
          },
        ],
        [
          {
            text: joinChannelText,
            url: "https://t.me/GoGift_announcements",
          },
        ],
        [
          {
            text: supportText,
            url: "https://t.me/GoGift_Support",
          },
        ],
      ],
    },
  };
};

export const depositTransactionMessage = (language: Language) => {
  if (language === Language.RU)
    return (transaction: Pick<transaction, "amount">) =>
      `‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ${numberToString(
        transaction.amount
      )} TON —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`;

  return (transaction: Pick<transaction, "amount">) =>
    `‚úÖ Transaction complete. Amount of ${numberToString(
      transaction.amount
    )} TON has been added to your balance.`;
};

export const successTransactionMessage = (language: Language) => {
  if (language === Language.RU) {
    return (transaction: Pick<transaction, "amount" | "address">) =>
      `‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞! ${numberToString(
        transaction.amount
      )} TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª—ë–∫ (${transaction.address}).`;
  }

  return (transaction: Pick<transaction, "amount" | "address">) =>
    `‚úÖ Transaction created! Amount of ${numberToString(
      transaction.amount
    )} TON has been send to your wallet (${transaction.address}).`;
};

export const failedTransactionMessage = (language: Language) => {
  if (language === Language.RU) {
    return (transaction: Pick<transaction, "amount">) =>
      `‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞! ${numberToString(
        transaction.amount
      )} TON –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`;
  }

  return (transaction: Pick<transaction, "amount">) =>
    `‚ùå Transaction Declined! Amount of ${numberToString(
      transaction.amount
    )} TON has been added to your balance.`;
};

export const failedGiftTransactionMessage = (language: Language) => {
  if (language === Language.RU)
    return `‚ùå –í—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ú—ã –≤–µ—Ä–Ω—É–ª–∏ –µ–≥–æ –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.`;

  return `‚ùå Gift withdraw Declined! Gift has been returned to your inventory.`;
};
